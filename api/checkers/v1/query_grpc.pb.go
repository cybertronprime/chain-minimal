// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: checkers/v1/query.proto

package checkersv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CheckersTorramQuery_GetCheckersTorramGm_FullMethodName = "/checkers.v1.CheckersTorramQuery/GetCheckersTorramGm"
)

// CheckersTorramQueryClient is the client API for CheckersTorramQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckersTorramQueryClient interface {
	// GetGame returns the game at the requested index.
	GetCheckersTorramGm(ctx context.Context, in *ReqCheckersTorramQuery, opts ...grpc.CallOption) (*ResCheckersTorramQuery, error)
}

type checkersTorramQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckersTorramQueryClient(cc grpc.ClientConnInterface) CheckersTorramQueryClient {
	return &checkersTorramQueryClient{cc}
}

func (c *checkersTorramQueryClient) GetCheckersTorramGm(ctx context.Context, in *ReqCheckersTorramQuery, opts ...grpc.CallOption) (*ResCheckersTorramQuery, error) {
	out := new(ResCheckersTorramQuery)
	err := c.cc.Invoke(ctx, CheckersTorramQuery_GetCheckersTorramGm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckersTorramQueryServer is the server API for CheckersTorramQuery service.
// All implementations must embed UnimplementedCheckersTorramQueryServer
// for forward compatibility
type CheckersTorramQueryServer interface {
	// GetGame returns the game at the requested index.
	GetCheckersTorramGm(context.Context, *ReqCheckersTorramQuery) (*ResCheckersTorramQuery, error)
	mustEmbedUnimplementedCheckersTorramQueryServer()
}

// UnimplementedCheckersTorramQueryServer must be embedded to have forward compatible implementations.
type UnimplementedCheckersTorramQueryServer struct {
}

func (UnimplementedCheckersTorramQueryServer) GetCheckersTorramGm(context.Context, *ReqCheckersTorramQuery) (*ResCheckersTorramQuery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckersTorramGm not implemented")
}
func (UnimplementedCheckersTorramQueryServer) mustEmbedUnimplementedCheckersTorramQueryServer() {}

// UnsafeCheckersTorramQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckersTorramQueryServer will
// result in compilation errors.
type UnsafeCheckersTorramQueryServer interface {
	mustEmbedUnimplementedCheckersTorramQueryServer()
}

func RegisterCheckersTorramQueryServer(s grpc.ServiceRegistrar, srv CheckersTorramQueryServer) {
	s.RegisterService(&CheckersTorramQuery_ServiceDesc, srv)
}

func _CheckersTorramQuery_GetCheckersTorramGm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheckersTorramQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckersTorramQueryServer).GetCheckersTorramGm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckersTorramQuery_GetCheckersTorramGm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckersTorramQueryServer).GetCheckersTorramGm(ctx, req.(*ReqCheckersTorramQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckersTorramQuery_ServiceDesc is the grpc.ServiceDesc for CheckersTorramQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckersTorramQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "checkers.v1.CheckersTorramQuery",
	HandlerType: (*CheckersTorramQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCheckersTorramGm",
			Handler:    _CheckersTorramQuery_GetCheckersTorramGm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checkers/v1/query.proto",
}
